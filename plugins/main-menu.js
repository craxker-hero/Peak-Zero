import fs from 'fs'
import { join } from 'path'
import { xpRange } from '../lib/levelling.js'

// Configuraci√≥n inicial
const owner = '5492916439595@s.whatsapp.net'
const ownerMention = owner.split('@')[0]
const creatorNumber = '5492916439595'

// Definir saludo seg√∫n hora actual
const getGreeting = () => {
  const hour = new Date().getHours()
  const greetingMap = {
    0: 'buenas noches üåô',  1: 'buenas noches üåô',  2: 'buenas noches üåô',
    3: 'buenas noches üåô',  4: 'buenas noches üåô',  5: 'buenas noches üåô',
    6: 'buenos d√≠as üåû',    7: 'buenos d√≠as üåû',    8: 'buenos d√≠as üåû',
    9: 'buenos d√≠as üåû',   10: 'buenos d√≠as üåû',   11: 'buenos d√≠as üåû',
    12: 'buenas tardes üåÖ', 13: 'buenas tardes üåÖ', 14: 'buenas tardes üåÖ',
    15: 'buenas tardes üåÖ', 16: 'buenas tardes üåÖ', 17: 'buenas tardes üåÖ',
    18: 'buenas noches üåô', 19: 'buenas noches üåô', 20: 'buenas noches üåô',
    21: 'buenas noches üåô', 22: 'buenas noches üåô', 23: 'buenas noches üåô',
  }
  return greetingMap[hour] || 'un buen d√≠a'
}

const greeting = getGreeting()

// Estilos y categor√≠as
const estilo = (text, style = 1) => {
  const xStr = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','1','2','3','4','5','6','7','8','9','0']
  const yStr = Object.freeze({
    1: ['ùñ∫','ùñª','ùñº','ùñΩ','ùñæ','ùñø','ùóÄ','ùóÅ','ùóÇ','ùóÉ','ùóÑ','ùóÖ','ùóÜ','ùóá','ùóà','ùóâ','ùóä','ùóã','ùóå','ùóç','ùóé','ùóè','ùóê','ùóë','ùóí','ùóì','1','2','3','4','5','6','7','8','9','0']
  })

  const replacer = xStr.map((v, i) => ({ original: v, convert: yStr[style][i] }))
  return text.toLowerCase().split('').map(v => {
    const find = replacer.find(x => x.original === v)
    return find ? find.convert : v
  }).join('')
}

const tags = {
  serbot: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  ü•† *`ùñ©ùñ∫ùñΩƒ±-·ó∑·®£∆öùóå`*     ◊Öü•†◊Å·∑í·Æ¨    ◊Ö',
  eco: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  ü•ß  *`ùñ§ùñº·®£ùóá·®£ùóÜƒ±ùñ∫`*     ◊Öü•ß◊Å·∑í·Æ¨    ◊Ö',
  downloader: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üçπ  *`ùñ£·®£ùóêùóáùóÖ·®£ùñ∫ùñΩ·ßâÍ≠áùóå`*     ◊Öüçπ◊Å·∑í·Æ¨    ◊Ö',
  tools: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  ü™æ  *`ùñ≥·®£·®£ùóÖùóå`*     ◊Öü™æ◊Å·∑í·Æ¨    ◊Ö',
  owner: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üå¥  *`O…Øùóá·ßâÍ≠á`*     ◊Öüå¥◊Å·∑í·Æ¨    ◊Ö',
  info: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üåª  *`ùñ®ùóá·∫ú·®£`*     ◊Öüåª◊Å·∑í·Æ¨    ◊Ö',
  gacha: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üå∏  *`ùñ†ùóáƒ±ùóÜ·ßâ`*     ◊Öüå∏◊Å·∑í·Æ¨    ◊Ö',
  group: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  ü™π  *`GÍ≠áùóéùóâ·®£ùóå`*     ◊Öü™π◊Å·∑í·Æ¨    ◊Ö',
  search: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üêû  *`ùñ®ùóá∆ö·ßâÍ≠áùóá·ßâ∆ö`*     ◊Öüêû◊Å·∑í·Æ¨    ◊Ö',
  sticker: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üçí  *`ùñ≤∆öùóÇùñºùóÑ·ßâÍ≠á`*     ◊Öüçí◊Å·∑í·Æ¨    ◊Ö',
  ia: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  ÔøΩ  *`ùñ®ùóá∆ö·ßâùñ®ƒ±ùóÄ·ßâùóáùñºƒ±ùñ∫ùóå`*     ◊Öüçì◊Å·∑í·Æ¨    ◊Ö',
  channel: '*‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üç•  `ùñ¢ùñ∫ùóáùñ∫ùóÖ·ßâùóå`*     ◊Öüç•◊Å·∑í·Æ¨    ◊Ö',
  fun: '‚Åû)·∑ºÕù„Ö§÷Ø„Ö§÷∏÷¢÷∂  üçö  *`ùñ•ùóéùóá`*     ◊Öüçö◊Å·∑í·Æ¨    ◊Ö',
}

const emojis = {
  serbot: 'ü•†',
  eco: 'ü•ß',
  downloader: 'üçπ',
  tools: 'ü™æ',
  owner: 'üå¥',
  info: 'üåª',
  gacha: 'üå∏',
  group: 'ü™π',
  search: 'üêû',
  sticker: 'üçí',
  ia: 'üçì',
  channel: 'üç•',
  fun: 'üçö',
}

// Plantilla del men√∫
const defaultMenu = {
  before: `
\`\`\`„Ö§·®¶·∑º€™€™€™€™◊Ñ„Ö§÷¢„Ö§◊Ñ„Ö§◊Ö÷ü·çù„Ö§‚ã±„Ö§‚Åù„Ö§‚ã∞„Ö§◊Ö·çù÷ü„Ö§◊Ñ„Ö§÷¢„Ö§·∑º€™€™€™€™◊Ñ‡¥í \`\`\`
\`\`\` ·èä ◊Ö %greeting ‡ßé‡≠≠ \`\`\`
\`\`\`   ◊Ö ‡∑´%taguser ‡≤í \`\`\`

\`\`\`‡ßéÃäŸú÷ºüå¥Í®©„Ä≠„Ä™Ã•‡ªã ùñ≠ùóàùóÜùñªùóãùñæ : %name \`\`\`
\`\`\`‡ßéÃäŸú÷ºüå≥Í®©„Ä≠„Ä™Ã•‡ªã ùñ¨ùóàùñΩùóà : publico \`\`\`
\`\`\`‡ßéÃäŸú÷ºüå±Í®©„Ä≠„Ä™Ã•‡ªã ùñ±ùóéùóá : [%uptime] \`\`\`
\`\`\`‡ßéÃäŸú÷ºü™πÍ®©„Ä≠„Ä™Ã•‡ªã ùñÆùóêùóáùñæùóã : @${ownerMention} \`\`\`
\`\`\`‡ßéÃäŸú÷ºü•¶Í®©„Ä≠„Ä™Ã•‡ªã ùñØùóãùñæùñøùóÇùóÉùóà : ( ! . / ) \`\`\`
\`\`\`‡ßéÃäŸú÷ºüçíÍ®©„Ä≠„Ä™Ã•‡ªã ÔøΩùóàùóÜùñ∫ùóáùñΩùóàùóå : %totalf \`\`\`
\`\`\`‡ßéÃäŸú÷ºüçµÍ®©„Ä≠„Ä™Ã•‡ªã ùñµùñæùóãùóåùóÇùóàùóá : 1.0.0-beta \`\`\`

%readmore`.trimStart(),
  header: '\n%category',
  body: '¬∞ìÉâêáΩ‹≥ìè∏%emoji·Æ¨·©¨÷º·™≤„Ä´÷¥€ü. %cmd %islimit %isPremium',
  footer: '',
  after: '\n> ÔøΩùóàùóêùñæùóã ùñ°ùóí ùñ®ùóìùóéùóÜùóÇ - ùñ¨ùñ∫ùóà ùñ¢ùóÅùñ∫ùóá',
}

// Funciones utilitarias
const more = String.fromCharCode(8206)
const readMore = more.repeat(4001)

const clockString = (ms) => {
  const h = isNaN(ms) ? '--' : Math.floor(ms / 3600000)
  const m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60
  const s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60
  return [h, m, s].map(v => v.toString().padStart(2, '0')).join(':')
}

// Manejador principal
const handler = async (m, { conn, usedPrefix: _p }) => {
  try {
    const { exp, limit, level } = global.db.data.users[m.sender] || {}
    const { min, xp, max } = xpRange(level, global.multiplier || 1)
    const name = await conn.getName(m.sender).catch(() => 'Usuario')

    // Contar comandos totales
    const totalf = Object.values(global.plugins || {}).reduce((total, plugin) => {
      if (plugin.command) {
        return total + (Array.isArray(plugin.command) ? plugin.command.length : 1
      }
      return total
    }, 0)

    // Configuraci√≥n de fecha
    const locale = 'es'
    const date = new Date().toLocaleDateString(locale, { 
      weekday: 'long', 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric' 
    })

    // Procesar plugins para el men√∫
    const help = Object.values(global.plugins || {})
      .filter(p => !p.disabled)
      .map(plugin => ({
        help: Array.isArray(plugin.help) ? plugin.help : [plugin.help],
        tags: Array.isArray(plugin.tags) ? plugin.tags : [plugin.tags],
        prefix: 'customPrefix' in plugin,
        limit: plugin.limit,
        premium: plugin.premium,
      }))

    // Configuraci√≥n del bot
    let nombreBot = global.namebot || 'Bot'
    let bannerFinal = 'https://iili.io/FrbNIr7.jpg'
    const botActual = conn.user?.jid?.split('@')[0].replace(/\D/g, '') || ''

    try {
      const configPath = join('./JadiBots', botActual, 'config.json')
      if (fs.existsSync(configPath)) {
        const config = JSON.parse(fs.readFileSync(configPath, 'utf-8'))
        if (config.name) nombreBot = config.name
        if (config.banner) bannerFinal = config.banner
      }
    } catch (e) {
      console.error('Error al leer configuraci√≥n:', e)
    }

    const tipo = botActual === '50493059810' ? 'Principal ü™¥' : 'Sub Bot üçÉ'

    // Generar texto del men√∫
    const menuConfig = conn.menu || defaultMenu
    const _text = [
      menuConfig.before,
      ...Object.keys(tags).map(tag => {
        const icon = emojis[tag] || ''
        const title = tags[tag]
        const h = menuConfig.header
          .replace(/%emoji/g, icon)
          .replace(/%category/g, title)
        
        const b = help
          .filter(menu => menu.tags?.includes(tag))
          .map(menu => menu.help.map(helpText =>
            menuConfig.body
              .replace(/%emoji/g, icon)
              .replace(/%cmd/g, menu.prefix ? helpText : `${_p}${helpText}`)
              .replace(/%islimit/g, menu.limit ? '‚óú‚≠ê‚óû' : '')
              .replace(/%isPremium/g, menu.premium ? '‚óúü™™‚óû' : '')
              .trim()
          ).join('\n')).join('\n')
        
        return [h, b, menuConfig.footer].join('\n')
      }),
      menuConfig.after
    ].join('\n')

    // Reemplazos din√°micos
    const replace = {
      '%': '%',
      p: _p,
      botname: nombreBot,
      taguser: '@' + (m.sender.split('@')[0] || ''),
      exp: exp ? exp - min : 0,
      maxexp: xp || 0,
      totalexp: exp || 0,
      xp4levelup: max ? max - xp : 0,
      level: level || 0,
      limit: limit || 0,
      name,
      totalf,
      date,
      uptime: clockString(process.uptime() * 1000),
      tipo,
      readmore: readMore,
      greeting,
    }

    const text = _text.replace(
      new RegExp(`%(${Object.keys(replace).sort((a, b) => b.length - a.length).join('|')})`, 'g'),
      (_, name) => String(replace[name])
    )

    // Enviar mensaje
    await conn.sendMessage(m.chat, {
      text: estilo(text),
      mentions: [m.sender, owner],
      contextInfo: {
        externalAdReply: {
          title: nombreBot,
          body: date,
          thumbnailUrl: bannerFinal,
          sourceUrl: 'https://whatsapp.com/channel/0029VbArz9fAO7RGy2915k3O',
          mediaType: 1,
          renderLargerThumbnail: true
        }
      }
    }, { quoted: m })

  } catch (e) {
    console.error('Error en el men√∫:', e)
    await conn.reply(m.chat, '‚ùé Ocurri√≥ un error al mostrar el men√∫. Por favor intenta nuevamente.', m)
  }
}

handler.command = ['menu', 'help', 'men√∫']
handler.register = true
export default handler